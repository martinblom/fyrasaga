// Auto-generated from charmake.html.
// DO NOT EDIT.

library charmake;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import '_from_packages/widget/components/modal.dart';
import 'xclickcounter.dart';
import 'dart:html';
import 'package:web_ui/web_ui.dart';
import 'dart:json' as json;
import 'package:widget/widget.dart';


// Original code


class Character {
  Map characteristics = {"Intelligence":0,"Perception":0,"Strength":0,"Stamina":0,"Presence":0,
                         "Communication":0,"Quickness":0,"Dexterity":0};
  String sAge = '18';
  String sYear = '1';
  bool magus = false;
  String name = "Outis";
  String player = "Nemo";
  String home = "Far away";
  Map virtuesAndFlaws = {};
  Map skills = {};
  Map relationships = {};
  Map arts = {};
  Map personality = {};
  List belongings = [];
  Map chronicle = {};
  
  Character(this.name);
  
  void fromJson(Map input) {
    name = input['Name'];
    player = input['Player'];
    home = input['Home'];
    characteristics = input['Characteristics'];
    sAge = input['Age'].toString();
    sYear = input['Year'].toString();
    magus = input['Magus'];
    virtuesAndFlaws = input['Virtues and flaws'];
    skills = input['Skills'];
    relationships = input['Relationships'];
    arts = input['Arts'];
    personality = input['Personality'];
    belongings = input['Belongings'];
    chronicle = input['Chronicle'];
  }
  
  
  
  String stringify() {
    Map output = {};
    output['Name'] = name;
    output['Home'] = home;
    output['Player'] = player;
    output['Characteristics'] = characteristics;
    output['Age'] = this.age;
    output['Year'] = this.year;
    output['Magus'] = magus;
    output['Virtues and flaws'] = virtuesAndFlaws;
    output['Skills'] = skills;
    output['Relationships'] = relationships;
    output['Arts'] = arts;
    output['Personality'] = personality;
    output['Belongings'] = belongings;
    output['Chronicle'] = chronicle;
    return json.stringify(output);
  }
  int get age => int.parse(sAge);
  int get year => int.parse(sYear);
}



var c = new Character("Outis");
var charStat = c.stringify();

int pyramid(number) {
  if (number > 0) return (number*(number+1)/2).round();
  else return -(number*(number-1)/2).round();
}

int totalCost() {
  int tot = 0;
  c.characteristics.forEach((k,v) => tot = tot+pyramid(v));
  return tot;
}

void addDescription(Event e, Map desc, String field, var init) {
  e.preventDefault(); // don't submit the form
  var input = query(field);
  if (input.value == '') return;
  desc[input.value]=init;
  input.value = '';
}

void saveCharacter() {
  /*
  HttpRequest request = new HttpRequest(); // create a new XHR

  // POST the data to the server http://localhost:9080/
  var url = "http://127.0.0.1:9080/savecharacter";
  request.open("POST", url, async: false);

  String jsonData = c.stringify(); // etc...
  request.send(jsonData); // perform the async POST*/
  charStat = c.stringify();
  query('title').text = c.name;
  query('#modal_save').xtag.show();
}

void loadCharacter() {
  /*
  HttpRequest request = new HttpRequest(); // create a new XHR

  // POST the data to the server http://localhost:9080/
  var url = "http://127.0.0.1:9080/savecharacter";
  request.open("POST", url, async: false);

  String jsonData = c.stringify(); // etc...
  request.send(jsonData); // perform the async POST*/
  c.fromJson(json.parse(charStat));
  query('title').text = c.name;
}

int totalSkillCost() {
  int tot = 0;
  c.skills.forEach((k,v) => tot = tot+5*pyramid(v));
  return tot;
}


/**
 * Learn about the Web UI package by visiting
 * http://www.dartlang.org/articles/dart-web-components/.
 */
void main() {
  // Enable this to use Shadow DOM in the browser.
  //useShadowDom = true;
}

// Additional generated code
void init_autogenerated() {
  var __root = autogenerated.document.body;
  final __html0 = new autogenerated.Element.html('<div id="virtue-flaw"></div>'), __html1 = new autogenerated.Element.html('<div is="x-click-counter" id="click_counter"></div>'), __html2 = new autogenerated.Element.html('<div id="virtue-flaw"></div>'), __html3 = new autogenerated.Element.html('<div id="virtue-flaw"></div>'), __html4 = new autogenerated.Element.html('<div id="virtue-flaw"></div>');
  var __e0, __e1, __e10, __e11, __e12, __e13, __e14, __e15, __e16, __e17, __e18, __e19, __e2, __e20, __e22, __e25, __e26, __e27, __e29, __e3, __e30, __e31, __e33, __e35, __e38, __e39, __e4, __e40, __e43, __e44, __e45, __e48, __e49, __e50, __e6, __e7, __e8, __e9;
  var __t = new autogenerated.Template(__root);
  __e0 = __root.nodes[1].nodes[3].nodes[0];
  __t.listen(__e0.onClick, ($event) { query('#modal_load').xtag.show();; });
  __e1 = __root.nodes[1].nodes[5].nodes[0];
  __t.listen(__e1.onClick, ($event) { saveCharacter(); });
  __e4 = __root.nodes[3];
  __e2 = __e4.nodes[3].nodes[3];
  __t.listen(__e2.onInput, ($event) { charStat = __e2.value; });
  __t.oneWayBind(() => charStat, (e) { if (__e2.value != e) __e2.value = e; }, false, false);
  __e3 = __e4.nodes[5].nodes[3];
  __t.listen(__e3.onClick, ($event) { loadCharacter(); });
  __t.component(new Modal()..host = __e4);
  __e7 = __root.nodes[5];
  __e6 = __e7.nodes[3].nodes[3];
  var __binding5 = __t.contentBind(() => charStat, false);
  __e6.nodes.addAll([new autogenerated.Text(' '),
      __binding5,
      new autogenerated.Text(' ')]);
  __t.component(new Modal()..host = __e7);
  __e8 = __root.nodes[7].nodes[1];
  __t.listen(__e8.onInput, ($event) { c.name = __e8.value; });
  __t.oneWayBind(() => c.name, (e) { if (__e8.value != e) __e8.value = e; }, false, false);
  __e9 = __root.nodes[7].nodes[3].nodes[1];
  __t.listen(__e9.onInput, ($event) { c.sAge = __e9.value; });
  __t.oneWayBind(() => c.sAge, (e) { if (__e9.value != e) __e9.value = e; }, false, false);
  __e10 = __root.nodes[7].nodes[3].nodes[3];
  __t.listen(__e10.onInput, ($event) { c.sYear = __e10.value; });
  __t.oneWayBind(() => c.sYear, (e) { if (__e10.value != e) __e10.value = e; }, false, false);
  __e11 = __root.nodes[7].nodes[3].nodes[5];
  __t.listen(__e11.onInput, ($event) { c.home = __e11.value; });
  __t.oneWayBind(() => c.home, (e) { if (__e11.value != e) __e11.value = e; }, false, false);
  __e12 = __root.nodes[7].nodes[3].nodes[7];
  __t.listen(__e12.onInput, ($event) { c.player = __e12.value; });
  __t.oneWayBind(() => c.player, (e) { if (__e12.value != e) __e12.value = e; }, false, false);
  __e13 = __root.nodes[9].nodes[1].nodes[3];
  __t.bind(() => null,  (__e) { __e13.xtag.name = 'Intelligence'; }, true);
  __t.oneWayBind(() => c.characteristics, (e) { if (__e13.xtag.type != e) __e13.xtag.type = e; }, false, false);
  __t.component(new CounterComponent()..host = __e13);
  __e14 = __root.nodes[9].nodes[1].nodes[5];
  __t.bind(() => null,  (__e) { __e14.xtag.name = 'Perception'; }, true);
  __t.oneWayBind(() => c.characteristics, (e) { if (__e14.xtag.type != e) __e14.xtag.type = e; }, false, false);
  __t.component(new CounterComponent()..host = __e14);
  __e15 = __root.nodes[9].nodes[1].nodes[7];
  __t.bind(() => null,  (__e) { __e15.xtag.name = 'Strength'; }, true);
  __t.oneWayBind(() => c.characteristics, (e) { if (__e15.xtag.type != e) __e15.xtag.type = e; }, false, false);
  __t.component(new CounterComponent()..host = __e15);
  __e16 = __root.nodes[9].nodes[1].nodes[9];
  __t.bind(() => null,  (__e) { __e16.xtag.name = 'Stamina'; }, true);
  __t.oneWayBind(() => c.characteristics, (e) { if (__e16.xtag.type != e) __e16.xtag.type = e; }, false, false);
  __t.component(new CounterComponent()..host = __e16);
  __e17 = __root.nodes[9].nodes[1].nodes[11];
  __t.bind(() => null,  (__e) { __e17.xtag.name = 'Presence'; }, true);
  __t.oneWayBind(() => c.characteristics, (e) { if (__e17.xtag.type != e) __e17.xtag.type = e; }, false, false);
  __t.component(new CounterComponent()..host = __e17);
  __e18 = __root.nodes[9].nodes[1].nodes[13];
  __t.bind(() => null,  (__e) { __e18.xtag.name = 'Communication'; }, true);
  __t.oneWayBind(() => c.characteristics, (e) { if (__e18.xtag.type != e) __e18.xtag.type = e; }, false, false);
  __t.component(new CounterComponent()..host = __e18);
  __e19 = __root.nodes[9].nodes[1].nodes[15];
  __t.bind(() => null,  (__e) { __e19.xtag.name = 'Quickness'; }, true);
  __t.oneWayBind(() => c.characteristics, (e) { if (__e19.xtag.type != e) __e19.xtag.type = e; }, false, false);
  __t.component(new CounterComponent()..host = __e19);
  __e20 = __root.nodes[9].nodes[1].nodes[17];
  __t.bind(() => null,  (__e) { __e20.xtag.name = 'Dexterity'; }, true);
  __t.oneWayBind(() => c.characteristics, (e) { if (__e20.xtag.type != e) __e20.xtag.type = e; }, false, false);
  __t.component(new CounterComponent()..host = __e20);
  __e22 = __root.nodes[9].nodes[1].nodes[19];
  var __binding21 = __t.contentBind(() => totalCost(), false);
  __e22.nodes.addAll([new autogenerated.Text('Points used: '),
      __binding21]);
  __e25 = __root.nodes[9].nodes[3].nodes[3];
  __t.loop(__e25, () => c.virtuesAndFlaws.keys, ($list, $index, __t) {
    var x = $list[$index];
    var __e24;
    __e24 = __html0.clone(true);
    var __binding23 = __t.contentBind(() => x, false);
    __e24.nodes.add(__binding23);
  __t.addAll([new autogenerated.Text('\n        '),
      __e24,
      new autogenerated.Text('\n      ')]);
  });
  __e27 = __root.nodes[9].nodes[3].nodes[5];
  __e26 = __e27.nodes[1];
  __t.listen(__e26.onChange, ($event) { addDescription($event,c.virtuesAndFlaws,'#new_virtue_or_flaw',''); });
  __t.listen(__e27.onSubmit, ($event) { addDescription($event,c.virtuesAndFlaws,'#new_virtue_or_flaw',''); });
  __e29 = __root.nodes[9].nodes[5].nodes[3];
  __t.loop(__e29, () => c.skills.keys, ($list, $index, __t) {
    var x = $list[$index];
    var __e28;
    __e28 = __html1.clone(true);
    __t.oneWayBind(() => true, (e) { if (__e28.xtag.deletable != e) __e28.xtag.deletable = e; }, false, false);
    __t.oneWayBind(() => x, (e) { if (__e28.xtag.name != e) __e28.xtag.name = e; }, false, false);
    __t.oneWayBind(() => c.skills, (e) { if (__e28.xtag.type != e) __e28.xtag.type = e; }, false, false);
    __t.component(new CounterComponent()..host = __e28);
  __t.addAll([new autogenerated.Text('\n        '),
      __e28,
      new autogenerated.Text('\n      ')]);
  });
  __e31 = __root.nodes[9].nodes[5].nodes[5];
  __e30 = __e31.nodes[1];
  __t.listen(__e30.onChange, ($event) { addDescription($event,c.skills,'#new_skill',0); });
  __t.listen(__e31.onSubmit, ($event) { addDescription($event,c.skills,'#new_skill',0); });
  __e33 = __root.nodes[9].nodes[5].nodes[7];
  var __binding32 = __t.contentBind(() => totalSkillCost(), false);
  __e33.nodes.addAll([new autogenerated.Text('Points used: '),
      __binding32]);
  __e35 = __root.nodes[9].nodes[5].nodes[9];
  var __binding34 = __t.contentBind(() => 120+(c.age-5)*15, false);
  __e35.nodes.addAll([new autogenerated.Text('Points available: '),
      __binding34]);
  __e38 = __root.nodes[9].nodes[7].nodes[3];
  __t.loop(__e38, () => c.relationships.keys, ($list, $index, __t) {
    var x = $list[$index];
    var __e37;
    __e37 = __html2.clone(true);
    var __binding36 = __t.contentBind(() => x, false);
    __e37.nodes.add(__binding36);
  __t.addAll([new autogenerated.Text('\n        '),
      __e37,
      new autogenerated.Text('\n      ')]);
  });
  __e40 = __root.nodes[9].nodes[7].nodes[5];
  __e39 = __e40.nodes[1];
  __t.listen(__e39.onChange, ($event) { addDescription($event,c.relationships,'#new_relationship',''); });
  __t.listen(__e40.onSubmit, ($event) { addDescription($event,c.relationships,'#new_relationship',''); });
  __e43 = __root.nodes[9].nodes[9].nodes[3];
  __t.loop(__e43, () => c.personality.keys, ($list, $index, __t) {
    var x = $list[$index];
    var __e42;
    __e42 = __html3.clone(true);
    var __binding41 = __t.contentBind(() => x, false);
    __e42.nodes.add(__binding41);
  __t.addAll([new autogenerated.Text('\n        '),
      __e42,
      new autogenerated.Text('\n      ')]);
  });
  __e45 = __root.nodes[9].nodes[9].nodes[5];
  __e44 = __e45.nodes[1];
  __t.listen(__e44.onChange, ($event) { addDescription($event,c.personality,'#new_personality',''); });
  __t.listen(__e45.onSubmit, ($event) { addDescription($event,c.personality,'#new_personality',''); });
  __e48 = __root.nodes[9].nodes[11].nodes[3];
  __t.loop(__e48, () => c.chronicle.keys, ($list, $index, __t) {
    var x = $list[$index];
    var __e47;
    __e47 = __html4.clone(true);
    var __binding46 = __t.contentBind(() => x, false);
    __e47.nodes.add(__binding46);
  __t.addAll([new autogenerated.Text('\n        '),
      __e47,
      new autogenerated.Text('\n      ')]);
  });
  __e50 = __root.nodes[9].nodes[11].nodes[5];
  __e49 = __e50.nodes[1];
  __t.listen(__e49.onChange, ($event) { addDescription($event,c.chronicle,'#new_chronicle',''); });
  __t.listen(__e50.onSubmit, ($event) { addDescription($event,c.chronicle,'#new_chronicle',''); });
  __t.create();
  __t.insert();
}

//@ sourceMappingURL=charmake.dart.map